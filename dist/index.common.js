"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.VXETablePluginCharts = void 0;

var _xeUtils = _interopRequireDefault(require("xe-utils/methods/xe-utils"));

var echarts = _interopRequireWildcard(require("echarts/lib/echarts"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint-enable no-unused-vars */
var _vxetable;

function createChartModal(getOptions) {
  return function (params) {
    var menu = params.menu;
    var $table = params.$table;
    var chartModals = $table.chartModals;

    if (!chartModals) {
      chartModals = $table.chartModals = [];
    }

    var opts = {
      id: _xeUtils["default"].uniqueId(),
      resize: true,
      mask: false,
      lockView: false,
      showFooter: false,
      width: 600,
      height: 400,
      title: menu.name,
      slots: {
        "default": function _default(params, h) {
          return [h('div', {
            "class": 'vxe-chart--wrapper'
          }, [h('div', {
            "class": 'vxe-chart--panel'
          })])];
        }
      },
      events: {
        show: function show(evntParams) {
          var $modal = evntParams.$modal;
          var $chart = echarts.init($modal.$el.querySelector('.vxe-chart--wrapper'));
          $chart.setOption(getOptions(params));
          $modal.$chart = $chart;
        },
        hide: function hide(evntParams) {
          var $modal = evntParams.$modal;

          _xeUtils["default"].remove(chartModals, function (id) {
            return id === $modal.id;
          });

          $modal.$chart.dispose();
          $modal.$chart = null;
        },
        zoom: function zoom(evntParams) {
          var $modal = evntParams.$modal;
          $modal.$chart.resize();
        }
      }
    };
    chartModals.push(opts.id);

    _vxetable.modal.open(opts);
  };
}

var menuMap = {
  CHART_BAR_X_AXIS: createChartModal(function (params) {
    var $table = params.$table;
    var menu = params.menu;

    var _$table$getSelectedRa = $table.getSelectedRanges(),
        rows = _$table$getSelectedRa.rows,
        columns = _$table$getSelectedRa.columns;

    var _menu$params = menu.params,
        chartParams = _menu$params === void 0 ? {} : _menu$params;
    var category = chartParams.category;
    var categoryColumn = $table.getColumnByField(category || columns[0].property);
    var serieColumns = columns.filter(function (column) {
      return column.property !== categoryColumn.property;
    });
    var legendOpts = {
      data: []
    };
    var seriesOpts = [];
    var xAxisOpts = {
      type: 'category',
      data: rows.map(function (row) {
        return _xeUtils["default"].get(row, categoryColumn.property);
      })
    };
    serieColumns.forEach(function (column) {
      legendOpts.data.push(column.title);
      seriesOpts.push({
        name: column.title,
        type: 'bar',
        data: rows.map(function (row) {
          return _xeUtils["default"].get(row, column.property);
        })
      });
    });
    var option = {
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          type: 'shadow'
        }
      },
      legend: legendOpts,
      xAxis: xAxisOpts,
      yAxis: {
        type: 'value'
      },
      series: seriesOpts
    };
    return option;
  }),
  CHART_BAR_Y_AXIS: createChartModal(function (params) {
    var $table = params.$table;
    var menu = params.menu;

    var _$table$getSelectedRa2 = $table.getSelectedRanges(),
        rows = _$table$getSelectedRa2.rows,
        columns = _$table$getSelectedRa2.columns;

    var _menu$params2 = menu.params,
        chartParams = _menu$params2 === void 0 ? {} : _menu$params2;
    var category = chartParams.category;
    var categoryColumn = $table.getColumnByField(category || columns[0].property);
    var serieColumns = columns.filter(function (column) {
      return column.property !== categoryColumn.property;
    });
    var legendOpts = {
      data: []
    };
    var seriesOpts = [];
    var xAxisOpts = {
      type: 'category',
      data: rows.map(function (row) {
        return _xeUtils["default"].get(row, categoryColumn.property);
      })
    };
    serieColumns.forEach(function (column) {
      legendOpts.data.push(column.title);
      seriesOpts.push({
        name: column.title,
        type: 'bar',
        data: rows.map(function (row) {
          return _xeUtils["default"].get(row, column.property);
        })
      });
    });
    var option = {
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          type: 'shadow'
        }
      },
      legend: legendOpts,
      xAxis: xAxisOpts,
      yAxis: {
        type: 'value'
      },
      series: seriesOpts
    };
    return option;
  }),
  CHART_LINE: createChartModal(function (params) {
    var $table = params.$table;
    var menu = params.menu;

    var _$table$getSelectedRa3 = $table.getSelectedRanges(),
        rows = _$table$getSelectedRa3.rows,
        columns = _$table$getSelectedRa3.columns;

    var _menu$params3 = menu.params,
        chartParams = _menu$params3 === void 0 ? {} : _menu$params3;
    var category = chartParams.category;
    var categoryColumn = $table.getColumnByField(category || columns[0].property);
    var serieColumns = columns.filter(function (column) {
      return column.property !== categoryColumn.property;
    });
    var legendOpts = {
      data: []
    };
    var seriesOpts = [];
    var xAxisOpts = {
      type: 'category',
      data: rows.map(function (row) {
        return _xeUtils["default"].get(row, categoryColumn.property);
      })
    };
    serieColumns.forEach(function (column) {
      legendOpts.data.push(column.title);
      seriesOpts.push({
        name: column.title,
        type: 'line',
        data: rows.map(function (row) {
          return _xeUtils["default"].get(row, column.property);
        })
      });
    });
    var option = {
      tooltip: {
        trigger: 'axis'
      },
      legend: legendOpts,
      toolbox: {
        feature: {
          saveAsImage: {}
        }
      },
      xAxis: xAxisOpts,
      yAxis: {
        type: 'value'
      },
      series: seriesOpts
    };
    return option;
  }),
  CHART_PIE: createChartModal(function (params) {
    var $table = params.$table;
    var menu = params.menu;

    var _$table$getSelectedRa4 = $table.getSelectedRanges(),
        rows = _$table$getSelectedRa4.rows,
        columns = _$table$getSelectedRa4.columns;

    var _menu$params4 = menu.params,
        chartParams = _menu$params4 === void 0 ? {} : _menu$params4;
    var category = chartParams.category;
    var categoryColumn = $table.getColumnByField(category || columns[0].property);
    var serieColumns = columns.filter(function (column) {
      return column.property !== categoryColumn.property;
    });
    var serieColumn = serieColumns[0];
    var legendData = rows.map(function (row) {
      return _xeUtils["default"].get(row, categoryColumn.property);
    });
    var seriesData = [];
    rows.forEach(function (row) {
      seriesData.push({
        name: _xeUtils["default"].get(row, categoryColumn.property),
        value: _xeUtils["default"].get(row, serieColumn.property)
      });
    });
    var option = {
      tooltip: {
        trigger: 'item',
        formatter: '{a} <br/>{b} : {c} ({d}%)'
      },
      legend: {
        type: 'scroll',
        orient: 'vertical',
        right: 10,
        top: 20,
        bottom: 20,
        data: legendData // selected: data.selected

      },
      series: [{
        name: serieColumn.title,
        type: 'pie',
        radius: '50%',
        center: ['40%', '50%'],
        data: seriesData
      }]
    };
    return option;
  })
};

function checkPrivilege(item, params) {
  var $table = params.$table;
  var code = item.code,
      _item$params = item.params,
      chartParams = _item$params === void 0 ? {} : _item$params;

  switch (code) {
    case 'CHART_BAR_X_AXIS':
    case 'CHART_BAR_Y_AXIS':
    case 'CHART_LINE':
      {
        var _$table$getSelectedRa5 = $table.getSelectedRanges(),
            rows = _$table$getSelectedRa5.rows,
            columns = _$table$getSelectedRa5.columns;

        var category = chartParams.category;

        if (category) {
          var serieColumns = columns.filter(function (column) {
            return column.property !== category;
          });
          item.disabled = !rows.length || serieColumns.length < 1;
        } else {
          item.disabled = !rows.length || columns.length < 2;
        }
      }
      break;

    case 'CHART_PIE':
      {
        var _$table$getSelectedRa6 = $table.getSelectedRanges(),
            _rows = _$table$getSelectedRa6.rows,
            _columns = _$table$getSelectedRa6.columns;

        var _category = chartParams.category;

        if (_category) {
          var _serieColumns = _columns.filter(function (column) {
            return column.property !== _category;
          });

          item.disabled = !_rows.length || _serieColumns.length !== 1;
        } else {
          item.disabled = !_rows.length || _columns.length !== 2;
        }
      }
      break;
  }
}

function handleBeforeDestroyEvent(params) {
  var $table = params.$table;
  var chartModals = $table.chartModals;

  if (chartModals) {
    chartModals.slice(0).forEach(function (id) {
      return _vxetable.modal.close(id);
    });
  }
}

function handlePrivilegeEvent(params) {
  params.options.forEach(function (list) {
    list.forEach(function (item) {
      checkPrivilege(item, params);

      if (item.children) {
        item.children.forEach(function (child) {
          checkPrivilege(child, params);
        });
      }
    });
  });
}
/**
 * 基于 vxe-table 表格的图表渲染插件
 */


var VXETablePluginCharts = {
  install: function install(xtable) {
    var v = xtable.v,
        interceptor = xtable.interceptor,
        menus = xtable.menus;

    if (v !== 'v2') {
      throw new Error('[vxe-table-plugin-charts] V2 version is required.');
    }

    _vxetable = xtable;
    interceptor.add('beforeDestroy', handleBeforeDestroyEvent);
    interceptor.add('event.showMenu', handlePrivilegeEvent);
    menus.mixin(menuMap);
  }
};
exports.VXETablePluginCharts = VXETablePluginCharts;

if (typeof window !== 'undefined' && window.VXETable) {
  window.VXETable.use(VXETablePluginCharts);
}

var _default2 = VXETablePluginCharts;
exports["default"] = _default2;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbIl92eGV0YWJsZSIsImNyZWF0ZUNoYXJ0TW9kYWwiLCJnZXRPcHRpb25zIiwicGFyYW1zIiwibWVudSIsIiR0YWJsZSIsImNoYXJ0TW9kYWxzIiwib3B0cyIsImlkIiwiWEVVdGlscyIsInVuaXF1ZUlkIiwicmVzaXplIiwibWFzayIsImxvY2tWaWV3Iiwic2hvd0Zvb3RlciIsIndpZHRoIiwiaGVpZ2h0IiwidGl0bGUiLCJuYW1lIiwic2xvdHMiLCJoIiwiZXZlbnRzIiwic2hvdyIsImV2bnRQYXJhbXMiLCIkbW9kYWwiLCIkY2hhcnQiLCJlY2hhcnRzIiwiaW5pdCIsIiRlbCIsInF1ZXJ5U2VsZWN0b3IiLCJzZXRPcHRpb24iLCJoaWRlIiwicmVtb3ZlIiwiZGlzcG9zZSIsInpvb20iLCJwdXNoIiwibW9kYWwiLCJvcGVuIiwibWVudU1hcCIsIkNIQVJUX0JBUl9YX0FYSVMiLCJnZXRTZWxlY3RlZFJhbmdlcyIsInJvd3MiLCJjb2x1bW5zIiwiY2hhcnRQYXJhbXMiLCJjYXRlZ29yeSIsImNhdGVnb3J5Q29sdW1uIiwiZ2V0Q29sdW1uQnlGaWVsZCIsInByb3BlcnR5Iiwic2VyaWVDb2x1bW5zIiwiZmlsdGVyIiwiY29sdW1uIiwibGVnZW5kT3B0cyIsImRhdGEiLCJzZXJpZXNPcHRzIiwieEF4aXNPcHRzIiwidHlwZSIsIm1hcCIsInJvdyIsImdldCIsImZvckVhY2giLCJvcHRpb24iLCJ0b29sdGlwIiwidHJpZ2dlciIsImF4aXNQb2ludGVyIiwibGVnZW5kIiwieEF4aXMiLCJ5QXhpcyIsInNlcmllcyIsIkNIQVJUX0JBUl9ZX0FYSVMiLCJDSEFSVF9MSU5FIiwidG9vbGJveCIsImZlYXR1cmUiLCJzYXZlQXNJbWFnZSIsIkNIQVJUX1BJRSIsInNlcmllQ29sdW1uIiwibGVnZW5kRGF0YSIsInNlcmllc0RhdGEiLCJ2YWx1ZSIsImZvcm1hdHRlciIsIm9yaWVudCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwicmFkaXVzIiwiY2VudGVyIiwiY2hlY2tQcml2aWxlZ2UiLCJpdGVtIiwiY29kZSIsImRpc2FibGVkIiwibGVuZ3RoIiwiaGFuZGxlQmVmb3JlRGVzdHJveUV2ZW50Iiwic2xpY2UiLCJjbG9zZSIsImhhbmRsZVByaXZpbGVnZUV2ZW50Iiwib3B0aW9ucyIsImxpc3QiLCJjaGlsZHJlbiIsImNoaWxkIiwiVlhFVGFibGVQbHVnaW5DaGFydHMiLCJpbnN0YWxsIiwieHRhYmxlIiwidiIsImludGVyY2VwdG9yIiwibWVudXMiLCJFcnJvciIsImFkZCIsIm1peGluIiwid2luZG93IiwiVlhFVGFibGUiLCJ1c2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVBOztBQVlBOzs7Ozs7OztBQUNBO0FBRUEsSUFBSUEsU0FBSjs7QUFFQSxTQUFTQyxnQkFBVCxDQUEyQkMsVUFBM0IsRUFBeUY7QUFDdkYsU0FBTyxVQUFVQyxNQUFWLEVBQWdDO0FBQUEsUUFDN0JDLElBRDZCLEdBQ3BCRCxNQURvQixDQUM3QkMsSUFENkI7QUFFckMsUUFBTUMsTUFBTSxHQUFRRixNQUFNLENBQUNFLE1BQTNCO0FBQ0EsUUFBSUMsV0FBVyxHQUFhRCxNQUFNLENBQUNDLFdBQW5DOztBQUNBLFFBQUksQ0FBQ0EsV0FBTCxFQUFrQjtBQUNoQkEsTUFBQUEsV0FBVyxHQUFHRCxNQUFNLENBQUNDLFdBQVAsR0FBcUIsRUFBbkM7QUFDRDs7QUFDRCxRQUFNQyxJQUFJLEdBQUc7QUFDWEMsTUFBQUEsRUFBRSxFQUFFQyxvQkFBUUMsUUFBUixFQURPO0FBRVhDLE1BQUFBLE1BQU0sRUFBRSxJQUZHO0FBR1hDLE1BQUFBLElBQUksRUFBRSxLQUhLO0FBSVhDLE1BQUFBLFFBQVEsRUFBRSxLQUpDO0FBS1hDLE1BQUFBLFVBQVUsRUFBRSxLQUxEO0FBTVhDLE1BQUFBLEtBQUssRUFBRSxHQU5JO0FBT1hDLE1BQUFBLE1BQU0sRUFBRSxHQVBHO0FBUVhDLE1BQUFBLEtBQUssRUFBRWIsSUFBSSxDQUFDYyxJQVJEO0FBU1hDLE1BQUFBLEtBQUssRUFB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QWMsQ0FBQ0MsSUFBRCxFQUFPbkYsTUFBUCxDQUFkOztBQUNBLFVBQUltRixJQUFJLENBQUNVLFFBQVQsRUFBbUI7QUFDakJWLFFBQUFBLElBQUksQ0FBQ1UsUUFBTCxDQUFjckMsT0FBZCxDQUFzQixVQUFDc0MsS0FBRCxFQUFVO0FBQzlCWixVQUFBQSxjQUFjLENBQUNZLEtBQUQsRUFBUTlGLE1BQVIsQ0FBZDtBQUNELFNBRkQ7QUFHRDtBQUNGLEtBUEQ7QUFRRCxHQVREO0FBVUQ7QUFFRDs7Ozs7QUFHTyxJQUFNK0Ysb0JBQW9CLEdBQUc7QUFDbENDLEVBQUFBLE9BRGtDLG1CQUN4QkMsTUFEd0IsRUFDRDtBQUFBLFFBQ3ZCQyxDQUR1QixHQUNHRCxNQURILENBQ3ZCQyxDQUR1QjtBQUFBLFFBQ3BCQyxXQURvQixHQUNHRixNQURILENBQ3BCRSxXQURvQjtBQUFBLFFBQ1BDLEtBRE8sR0FDR0gsTUFESCxDQUNQRyxLQURPOztBQUUvQixRQUFJRixDQUFDLEtBQUssSUFBVixFQUFnQjtBQUNkLFlBQU0sSUFBSUcsS0FBSixDQUFVLG1EQUFWLENBQU47QUFDRDs7QUFDRHhHLElBQUFBLFNBQVMsR0FBR29HLE1BQVo7QUFDQUUsSUFBQUEsV0FBVyxDQUFDRyxHQUFaLENBQWdCLGVBQWhCLEVBQWlDZix3QkFBakM7QUFDQVksSUFBQUEsV0FBVyxDQUFDRyxHQUFaLENBQWdCLGdCQUFoQixFQUFrQ1osb0JBQWxDO0FBQ0FVLElBQUFBLEtBQUssQ0FBQ0csS0FBTixDQUFZcEUsT0FBWjtBQUNEO0FBVmlDLENBQTdCOzs7QUFhUCxJQUFJLE9BQU9xRSxNQUFQLEtBQWtCLFdBQWxCLElBQWlDQSxNQUFNLENBQUNDLFFBQTVDLEVBQXNEO0FBQ3BERCxFQUFBQSxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JDLEdBQWhCLENBQW9CWCxvQkFBcEI7QUFDRDs7Z0JBRWNBLG9CIiwiZmlsZSI6ImluZGV4LmNvbW1vbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXHJcbmltcG9ydCB7IENyZWF0ZUVsZW1lbnQgfSBmcm9tICd2dWUnXHJcbmltcG9ydCBYRVV0aWxzIGZyb20gJ3hlLXV0aWxzL21ldGhvZHMveGUtdXRpbHMnXHJcbmltcG9ydCB7XHJcbiAgVlhFVGFibGUsXHJcbiAgSW50ZXJjZXB0b3JQYXJhbXMsXHJcbiAgSW50ZXJjZXB0b3JNZW51UGFyYW1zLFxyXG4gIE1lbnVMaW5rUGFyYW1zLFxyXG4gIE1lbnVGaXJzdE9wdGlvbixcclxuICBNZW51Q2hpbGRPcHRpb24sXHJcbiAgQ29sdW1uQ29uZmlnLFxyXG4gIE1vZGFsRXZlbnRQYXJhbXMsXHJcbiAgTW9kYWxEZWZhdWx0U2xvdFBhcmFtc1xyXG59IGZyb20gJ3Z4ZS10YWJsZS9saWIvdnhlLXRhYmxlJ1xyXG5pbXBvcnQgKiBhcyBlY2hhcnRzIGZyb20gJ2VjaGFydHMvbGliL2VjaGFydHMnXHJcbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cclxuXHJcbmxldCBfdnhldGFibGU6IHR5cGVvZiBWWEVUYWJsZVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQ2hhcnRNb2RhbCAoZ2V0T3B0aW9uczogKHBhcmFtczogTWVudUxpbmtQYXJhbXMpID0+IHsgW2tldDogc3RyaW5nXTogYW55IH0pIHtcclxuICByZXR1cm4gZnVuY3Rpb24gKHBhcmFtczogTWVudUxpbmtQYXJhbXMpIHtcclxuICAgIGNvbnN0IHsgbWVudSB9ID0gcGFyYW1zXHJcbiAgICBjb25zdCAkdGFibGU6IGFueSA9IHBhcmFtcy4kdGFibGVcclxuICAgIGxldCBjaGFydE1vZGFsczogc3RyaW5nW10gPSAkdGFibGUuY2hhcnRNb2RhbHNcclxuICAgIGlmICghY2hhcnRNb2RhbHMpIHtcclxuICAgICAgY2hhcnRNb2RhbHMgPSAkdGFibGUuY2hhcnRNb2RhbHMgPSBbXVxyXG4gICAgfVxyXG4gICAgY29uc3Qgb3B0cyA9IHtcclxuICAgICAgaWQ6IFhFVXRpbHMudW5pcXVlSWQoKSxcclxuICAgICAgcmVzaXplOiB0cnVlLFxyXG4gICAgICBtYXNrOiBmYWxzZSxcclxuICAgICAgbG9ja1ZpZXc6IGZhbHNlLFxyXG4gICAgICBzaG93Rm9vdGVyOiBmYWxzZSxcclxuICAgICAgd2lkdGg6IDYwMCxcclxuICAgICAgaGVpZ2h0OiA0MDAsXHJcbiAgICAgIHRpdGxlOiBtZW51Lm5hbWUsXHJcbiAgICAgIHNsb3RzOiB7XHJcbiAgICAgICAgZGVmYXVsdCAocGFyYW1zOiBNb2RhbERlZmF1bHRTbG90UGFyYW1zLCBoOiBDcmVhdGVFbGVtZW50KSB7XHJcbiAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBoKCdkaXYnLCB7XHJcbiAgICAgICAgICAgICAgY2xhc3M6ICd2eGUtY2hhcnQtLXdyYXBwZXInXHJcbiAgICAgICAgICAgIH0sIFtcclxuICAgICAgICAgICAgICBoKCdkaXYnLCB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ3Z4ZS1jaGFydC0tcGFuZWwnXHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgXSlcclxuICAgICAgICAgIF1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGV2ZW50czoge1xyXG4gICAgICAgIHNob3cgKGV2bnRQYXJhbXM6IE1vZGFsRXZlbnRQYXJhbXMpIHtcclxuICAgICAgICAgIGNvbnN0ICRtb2RhbDogYW55ID0gZXZudFBhcmFtcy4kbW9kYWxcclxuICAgICAgICAgIGNvbnN0ICRjaGFydCA9IGVjaGFydHMuaW5pdCgkbW9kYWwuJGVsLnF1ZXJ5U2VsZWN0b3IoJy52eGUtY2hhcnQtLXdyYXBwZXInKSlcclxuICAgICAgICAgICRjaGFydC5zZXRPcHRpb24oZ2V0T3B0aW9ucyhwYXJhbXMpKVxyXG4gICAgICAgICAgJG1vZGFsLiRjaGFydCA9ICRjaGFydFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGlkZSAoZXZudFBhcmFtczogTW9kYWxFdmVudFBhcmFtcykge1xyXG4gICAgICAgICAgY29uc3QgJG1vZGFsOiBhbnkgPSBldm50UGFyYW1zLiRtb2RhbFxyXG4gICAgICAgICAgWEVVdGlscy5yZW1vdmUoY2hhcnRNb2RhbHMsIGlkID0+IGlkID09PSAkbW9kYWwuaWQpXHJcbiAgICAgICAgICAkbW9kYWwuJGNoYXJ0LmRpc3Bvc2UoKVxyXG4gICAgICAgICAgJG1vZGFsLiRjaGFydCA9IG51bGxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHpvb20gKGV2bnRQYXJhbXM6IE1vZGFsRXZlbnRQYXJhbXMpIHtcclxuICAgICAgICAgIGNvbnN0ICRtb2RhbDogYW55ID0gZXZudFBhcmFtcy4kbW9kYWxcclxuICAgICAgICAgICRtb2RhbC4kY2hhcnQucmVzaXplKClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNoYXJ0TW9kYWxzLnB1c2gob3B0cy5pZClcclxuICAgIF92eGV0YWJsZS5tb2RhbC5vcGVuKG9wdHMpXHJcbiAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgbGVnZW5kT3B0cyB7XHJcbiAgZGF0YTogQXJyYXk8YW55PjtcclxufVxyXG5cclxuY29uc3QgbWVudU1hcCA9IHtcclxuICBDSEFSVF9CQVJfWF9BWElTOiBjcmVhdGVDaGFydE1vZGFsKChwYXJhbXMpID0+IHtcclxuICAgIGNvbnN0ICR0YWJsZTogYW55ID0gcGFyYW1zLiR0YWJsZVxyXG4gICAgY29uc3QgeyBtZW51IH0gPSBwYXJhbXNcclxuICAgIGNvbnN0IHsgcm93cywgY29sdW1ucyB9OiB7IHJvd3M6IGFueVtdLCBjb2x1bW5zOiBDb2x1bW5Db25maWdbXSB9ID0gJHRhYmxlLmdldFNlbGVjdGVkUmFuZ2VzKClcclxuICAgIGNvbnN0IHsgcGFyYW1zOiBjaGFydFBhcmFtcyA9IHt9IH0gPSBtZW51XHJcbiAgICBjb25zdCB7IGNhdGVnb3J5IH0gPSBjaGFydFBhcmFtc1xyXG4gICAgY29uc3QgY2F0ZWdvcnlDb2x1bW4gPSAkdGFibGUuZ2V0Q29sdW1uQnlGaWVsZChjYXRlZ29yeSB8fCBjb2x1bW5zWzBdLnByb3BlcnR5KVxyXG4gICAgY29uc3Qgc2VyaWVDb2x1bW5zID0gY29sdW1ucy5maWx0ZXIoKGNvbHVtbikgPT4gY29sdW1uLnByb3BlcnR5ICE9PSBjYXRlZ29yeUNvbHVtbi5wcm9wZXJ0eSlcclxuICAgIGNvbnN0IGxlZ2VuZE9wdHM6IGxlZ2VuZE9wdHMgPSB7XHJcbiAgICAgIGRhdGE6IFtdXHJcbiAgICB9XHJcbiAgICBjb25zdCBzZXJpZXNPcHRzOiBhbnlbXSA9IFtdXHJcbiAgICBjb25zdCB4QXhpc09wdHMgPSB7XHJcbiAgICAgIHR5cGU6ICdjYXRlZ29yeScsXHJcbiAgICAgIGRhdGE6IHJvd3MubWFwKChyb3cpID0+IFhFVXRpbHMuZ2V0KHJvdywgY2F0ZWdvcnlDb2x1bW4ucHJvcGVydHkpKVxyXG4gICAgfVxyXG4gICAgc2VyaWVDb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xyXG4gICAgICBsZWdlbmRPcHRzLmRhdGEucHVzaChjb2x1bW4udGl0bGUpXHJcbiAgICAgIHNlcmllc09wdHMucHVzaCh7XHJcbiAgICAgICAgbmFtZTogY29sdW1uLnRpdGxlLFxyXG4gICAgICAgIHR5cGU6ICdiYXInLFxyXG4gICAgICAgIGRhdGE6IHJvd3MubWFwKChyb3cpID0+IFhFVXRpbHMuZ2V0KHJvdywgY29sdW1uLnByb3BlcnR5KSlcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgICBjb25zdCBvcHRpb24gPSB7XHJcbiAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICB0cmlnZ2VyOiAnYXhpcycsXHJcbiAgICAgICAgYXhpc1BvaW50ZXI6IHtcclxuICAgICAgICAgIHR5cGU6ICdzaGFkb3cnXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBsZWdlbmQ6IGxlZ2VuZE9wdHMsXHJcbiAgICAgIHhBeGlzOiB4QXhpc09wdHMsXHJcbiAgICAgIHlBeGlzOiB7XHJcbiAgICAgICAgdHlwZTogJ3ZhbHVlJ1xyXG4gICAgICB9LFxyXG4gICAgICBzZXJpZXM6IHNlcmllc09wdHNcclxuICAgIH1cclxuICAgIHJldHVybiBvcHRpb25cclxuICB9KSxcclxuICBDSEFSVF9CQVJfWV9BWElTOiBjcmVhdGVDaGFydE1vZGFsKChwYXJhbXMpID0+IHtcclxuICAgIGNvbnN0ICR0YWJsZTogYW55ID0gcGFyYW1zLiR0YWJsZVxyXG4gICAgY29uc3QgeyBtZW51IH0gPSBwYXJhbXNcclxuICAgIGNvbnN0IHsgcm93cywgY29sdW1ucyB9OiB7IHJvd3M6IGFueVtdLCBjb2x1bW5zOiBDb2x1bW5Db25maWdbXSB9ID0gJHRhYmxlLmdldFNlbGVjdGVkUmFuZ2VzKClcclxuICAgIGNvbnN0IHsgcGFyYW1zOiBjaGFydFBhcmFtcyA9IHt9IH0gPSBtZW51XHJcbiAgICBjb25zdCB7IGNhdGVnb3J5IH0gPSBjaGFydFBhcmFtc1xyXG4gICAgY29uc3QgY2F0ZWdvcnlDb2x1bW4gPSAkdGFibGUuZ2V0Q29sdW1uQnlGaWVsZChjYXRlZ29yeSB8fCBjb2x1bW5zWzBdLnByb3BlcnR5KVxyXG4gICAgY29uc3Qgc2VyaWVDb2x1bW5zID0gY29sdW1ucy5maWx0ZXIoKGNvbHVtbikgPT4gY29sdW1uLnByb3BlcnR5ICE9PSBjYXRlZ29yeUNvbHVtbi5wcm9wZXJ0eSlcclxuICAgIGNvbnN0IGxlZ2VuZE9wdHM6IGxlZ2VuZE9wdHMgPSB7XHJcbiAgICAgIGRhdGE6IFtdXHJcbiAgICB9XHJcbiAgICBjb25zdCBzZXJpZXNPcHRzOiBhbnlbXSA9IFtdXHJcbiAgICBjb25zdCB4QXhpc09wdHMgPSB7XHJcbiAgICAgIHR5cGU6ICdjYXRlZ29yeScsXHJcbiAgICAgIGRhdGE6IHJvd3MubWFwKChyb3cpID0+IFhFVXRpbHMuZ2V0KHJvdywgY2F0ZWdvcnlDb2x1bW4ucHJvcGVydHkpKVxyXG4gICAgfVxyXG4gICAgc2VyaWVDb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xyXG4gICAgICBsZWdlbmRPcHRzLmRhdGEucHVzaChjb2x1bW4udGl0bGUpXHJcbiAgICAgIHNlcmllc09wdHMucHVzaCh7XHJcbiAgICAgICAgbmFtZTogY29sdW1uLnRpdGxlLFxyXG4gICAgICAgIHR5cGU6ICdiYXInLFxyXG4gICAgICAgIGRhdGE6IHJvd3MubWFwKChyb3cpID0+IFhFVXRpbHMuZ2V0KHJvdywgY29sdW1uLnByb3BlcnR5KSlcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgICBjb25zdCBvcHRpb24gPSB7XHJcbiAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICB0cmlnZ2VyOiAnYXhpcycsXHJcbiAgICAgICAgYXhpc1BvaW50ZXI6IHtcclxuICAgICAgICAgIHR5cGU6ICdzaGFkb3cnXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBsZWdlbmQ6IGxlZ2VuZE9wdHMsXHJcbiAgICAgIHhBeGlzOiB4QXhpc09wdHMsXHJcbiAgICAgIHlBeGlzOiB7XHJcbiAgICAgICAgdHlwZTogJ3ZhbHVlJ1xyXG4gICAgICB9LFxyXG4gICAgICBzZXJpZXM6IHNlcmllc09wdHNcclxuICAgIH1cclxuICAgIHJldHVybiBvcHRpb25cclxuICB9KSxcclxuICBDSEFSVF9MSU5FOiBjcmVhdGVDaGFydE1vZGFsKChwYXJhbXMpID0+IHtcclxuICAgIGNvbnN0ICR0YWJsZTogYW55ID0gcGFyYW1zLiR0YWJsZVxyXG4gICAgY29uc3QgeyBtZW51IH0gPSBwYXJhbXNcclxuICAgIGNvbnN0IHsgcm93cywgY29sdW1ucyB9OiB7IHJvd3M6IGFueVtdLCBjb2x1bW5zOiBDb2x1bW5Db25maWdbXSB9ID0gJHRhYmxlLmdldFNlbGVjdGVkUmFuZ2VzKClcclxuICAgIGNvbnN0IHsgcGFyYW1zOiBjaGFydFBhcmFtcyA9IHt9IH0gPSBtZW51XHJcbiAgICBjb25zdCB7IGNhdGVnb3J5IH0gPSBjaGFydFBhcmFtc1xyXG4gICAgY29uc3QgY2F0ZWdvcnlDb2x1bW4gPSAkdGFibGUuZ2V0Q29sdW1uQnlGaWVsZChjYXRlZ29yeSB8fCBjb2x1bW5zWzBdLnByb3BlcnR5KVxyXG4gICAgY29uc3Qgc2VyaWVDb2x1bW5zID0gY29sdW1ucy5maWx0ZXIoKGNvbHVtbikgPT4gY29sdW1uLnByb3BlcnR5ICE9PSBjYXRlZ29yeUNvbHVtbi5wcm9wZXJ0eSlcclxuICAgIGNvbnN0IGxlZ2VuZE9wdHM6IGxlZ2VuZE9wdHMgPSB7XHJcbiAgICAgIGRhdGE6IFtdXHJcbiAgICB9XHJcbiAgICBjb25zdCBzZXJpZXNPcHRzOiBhbnlbXSA9IFtdXHJcbiAgICBjb25zdCB4QXhpc09wdHMgPSB7XHJcbiAgICAgIHR5cGU6ICdjYXRlZ29yeScsXHJcbiAgICAgIGRhdGE6IHJvd3MubWFwKChyb3cpID0+IFhFVXRpbHMuZ2V0KHJvdywgY2F0ZWdvcnlDb2x1bW4ucHJvcGVydHkpKVxyXG4gICAgfVxyXG4gICAgc2VyaWVDb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xyXG4gICAgICBsZWdlbmRPcHRzLmRhdGEucHVzaChjb2x1bW4udGl0bGUpXHJcbiAgICAgIHNlcmllc09wdHMucHVzaCh7XHJcbiAgICAgICAgbmFtZTogY29sdW1uLnRpdGxlLFxyXG4gICAgICAgIHR5cGU6ICdsaW5lJyxcclxuICAgICAgICBkYXRhOiByb3dzLm1hcCgocm93KSA9PiBYRVV0aWxzLmdldChyb3csIGNvbHVtbi5wcm9wZXJ0eSkpXHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gICAgY29uc3Qgb3B0aW9uID0ge1xyXG4gICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgdHJpZ2dlcjogJ2F4aXMnXHJcbiAgICAgIH0sXHJcbiAgICAgIGxlZ2VuZDogbGVnZW5kT3B0cyxcclxuICAgICAgdG9vbGJveDoge1xyXG4gICAgICAgIGZlYXR1cmU6IHtcclxuICAgICAgICAgIHNhdmVBc0ltYWdlOiB7fVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgeEF4aXM6IHhBeGlzT3B0cyxcclxuICAgICAgeUF4aXM6IHtcclxuICAgICAgICB0eXBlOiAndmFsdWUnXHJcbiAgICAgIH0sXHJcbiAgICAgIHNlcmllczogc2VyaWVzT3B0c1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9wdGlvblxyXG4gIH0pLFxyXG4gIENIQVJUX1BJRTogY3JlYXRlQ2hhcnRNb2RhbCgocGFyYW1zKSA9PiB7XHJcbiAgICBjb25zdCAkdGFibGU6IGFueSA9IHBhcmFtcy4kdGFibGVcclxuICAgIGNvbnN0IHsgbWVudSB9ID0gcGFyYW1zXHJcbiAgICBjb25zdCB7IHJvd3MsIGNvbHVtbnMgfTogeyByb3dzOiBhbnlbXSwgY29sdW1uczogQ29sdW1uQ29uZmlnW10gfSA9ICR0YWJsZS5nZXRTZWxlY3RlZFJhbmdlcygpXHJcbiAgICBjb25zdCB7IHBhcmFtczogY2hhcnRQYXJhbXMgPSB7fSB9ID0gbWVudVxyXG4gICAgY29uc3QgeyBjYXRlZ29yeSB9ID0gY2hhcnRQYXJhbXNcclxuICAgIGNvbnN0IGNhdGVnb3J5Q29sdW1uID0gJHRhYmxlLmdldENvbHVtbkJ5RmllbGQoY2F0ZWdvcnkgfHwgY29sdW1uc1swXS5wcm9wZXJ0eSlcclxuICAgIGNvbnN0IHNlcmllQ29sdW1ucyA9IGNvbHVtbnMuZmlsdGVyKChjb2x1bW4pID0+IGNvbHVtbi5wcm9wZXJ0eSAhPT0gY2F0ZWdvcnlDb2x1bW4ucHJvcGVydHkpXHJcbiAgICBjb25zdCBzZXJpZUNvbHVtbiA9IHNlcmllQ29sdW1uc1swXVxyXG4gICAgY29uc3QgbGVnZW5kRGF0YSA9IHJvd3MubWFwKChyb3cpID0+IFhFVXRpbHMuZ2V0KHJvdywgY2F0ZWdvcnlDb2x1bW4ucHJvcGVydHkpKVxyXG4gICAgY29uc3Qgc2VyaWVzRGF0YTogYW55W10gPSBbXVxyXG4gICAgcm93cy5mb3JFYWNoKChyb3cpID0+IHtcclxuICAgICAgc2VyaWVzRGF0YS5wdXNoKHtcclxuICAgICAgICBuYW1lOiBYRVV0aWxzLmdldChyb3csIGNhdGVnb3J5Q29sdW1uLnByb3BlcnR5KSxcclxuICAgICAgICB2YWx1ZTogWEVVdGlscy5nZXQocm93LCBzZXJpZUNvbHVtbi5wcm9wZXJ0eSlcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgICBjb25zdCBvcHRpb24gPSB7XHJcbiAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICB0cmlnZ2VyOiAnaXRlbScsXHJcbiAgICAgICAgZm9ybWF0dGVyOiAne2F9IDxici8+e2J9IDoge2N9ICh7ZH0lKSdcclxuICAgICAgfSxcclxuICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgdHlwZTogJ3Njcm9sbCcsXHJcbiAgICAgICAgb3JpZW50OiAndmVydGljYWwnLFxyXG4gICAgICAgIHJpZ2h0OiAxMCxcclxuICAgICAgICB0b3A6IDIwLFxyXG4gICAgICAgIGJvdHRvbTogMjAsXHJcbiAgICAgICAgZGF0YTogbGVnZW5kRGF0YVxyXG4gICAgICAgIC8vIHNlbGVjdGVkOiBkYXRhLnNlbGVjdGVkXHJcbiAgICAgIH0sXHJcbiAgICAgIHNlcmllczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIG5hbWU6IHNlcmllQ29sdW1uLnRpdGxlLFxyXG4gICAgICAgICAgdHlwZTogJ3BpZScsXHJcbiAgICAgICAgICByYWRpdXM6ICc1MCUnLFxyXG4gICAgICAgICAgY2VudGVyOiBbJzQwJScsICc1MCUnXSxcclxuICAgICAgICAgIGRhdGE6IHNlcmllc0RhdGFcclxuICAgICAgICB9XHJcbiAgICAgIF1cclxuICAgIH1cclxuICAgIHJldHVybiBvcHRpb25cclxuICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja1ByaXZpbGVnZSAoaXRlbTogTWVudUZpcnN0T3B0aW9uIHwgTWVudUNoaWxkT3B0aW9uLCBwYXJhbXM6IEludGVyY2VwdG9yTWVudVBhcmFtcykge1xyXG4gIGNvbnN0ICR0YWJsZTogYW55ID0gcGFyYW1zLiR0YWJsZVxyXG4gIGNvbnN0IHsgY29kZSwgcGFyYW1zOiBjaGFydFBhcmFtcyA9IHt9IH0gPSBpdGVtXHJcbiAgc3dpdGNoIChjb2RlKSB7XHJcbiAgICBjYXNlICdDSEFSVF9CQVJfWF9BWElTJzpcclxuICAgIGNhc2UgJ0NIQVJUX0JBUl9ZX0FYSVMnOlxyXG4gICAgY2FzZSAnQ0hBUlRfTElORSc6IHtcclxuICAgICAgY29uc3QgeyByb3dzLCBjb2x1bW5zIH06IHsgcm93czogYW55W10sIGNvbHVtbnM6IENvbHVtbkNvbmZpZ1tdIH0gPSAkdGFibGUuZ2V0U2VsZWN0ZWRSYW5nZXMoKVxyXG4gICAgICBjb25zdCB7IGNhdGVnb3J5IH0gPSBjaGFydFBhcmFtc1xyXG4gICAgICBpZiAoY2F0ZWdvcnkpIHtcclxuICAgICAgICBjb25zdCBzZXJpZUNvbHVtbnMgPSBjb2x1bW5zLmZpbHRlcigoY29sdW1uKSA9PiBjb2x1bW4ucHJvcGVydHkgIT09IGNhdGVnb3J5KVxyXG4gICAgICAgIGl0ZW0uZGlzYWJsZWQgPSAhcm93cy5sZW5ndGggfHwgc2VyaWVDb2x1bW5zLmxlbmd0aCA8IDFcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpdGVtLmRpc2FibGVkID0gIXJvd3MubGVuZ3RoIHx8IGNvbHVtbnMubGVuZ3RoIDwgMlxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAgIGJyZWFrXHJcbiAgICBjYXNlICdDSEFSVF9QSUUnOiB7XHJcbiAgICAgIGNvbnN0IHsgcm93cywgY29sdW1ucyB9OiB7IHJvd3M6IGFueVtdLCBjb2x1bW5zOiBDb2x1bW5Db25maWdbXSB9ID0gJHRhYmxlLmdldFNlbGVjdGVkUmFuZ2VzKClcclxuICAgICAgY29uc3QgeyBjYXRlZ29yeSB9ID0gY2hhcnRQYXJhbXNcclxuICAgICAgaWYgKGNhdGVnb3J5KSB7XHJcbiAgICAgICAgY29uc3Qgc2VyaWVDb2x1bW5zID0gY29sdW1ucy5maWx0ZXIoKGNvbHVtbikgPT4gY29sdW1uLnByb3BlcnR5ICE9PSBjYXRlZ29yeSlcclxuICAgICAgICBpdGVtLmRpc2FibGVkID0gIXJvd3MubGVuZ3RoIHx8IHNlcmllQ29sdW1ucy5sZW5ndGggIT09IDFcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpdGVtLmRpc2FibGVkID0gIXJvd3MubGVuZ3RoIHx8IGNvbHVtbnMubGVuZ3RoICE9PSAyXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICAgYnJlYWtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUJlZm9yZURlc3Ryb3lFdmVudCAocGFyYW1zOiBJbnRlcmNlcHRvclBhcmFtcykge1xyXG4gIGNvbnN0ICR0YWJsZTogYW55ID0gcGFyYW1zLiR0YWJsZVxyXG4gIGNvbnN0IHsgY2hhcnRNb2RhbHMgfTogeyBjaGFydE1vZGFsczogc3RyaW5nW10gfSA9ICR0YWJsZVxyXG4gIGlmIChjaGFydE1vZGFscykge1xyXG4gICAgY2hhcnRNb2RhbHMuc2xpY2UoMCkuZm9yRWFjaCgoaWQpID0+IF92eGV0YWJsZS5tb2RhbC5jbG9zZShpZCkpXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVQcml2aWxlZ2VFdmVudCAocGFyYW1zOiBJbnRlcmNlcHRvck1lbnVQYXJhbXMpIHtcclxuICBwYXJhbXMub3B0aW9ucy5mb3JFYWNoKChsaXN0KSA9PiB7XHJcbiAgICBsaXN0LmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgY2hlY2tQcml2aWxlZ2UoaXRlbSwgcGFyYW1zKVxyXG4gICAgICBpZiAoaXRlbS5jaGlsZHJlbikge1xyXG4gICAgICAgIGl0ZW0uY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcclxuICAgICAgICAgIGNoZWNrUHJpdmlsZWdlKGNoaWxkLCBwYXJhbXMpXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9KVxyXG59XHJcblxyXG4vKipcclxuICog5Z+65LqOIHZ4ZS10YWJsZSDooajmoLznmoTlm77ooajmuLLmn5Pmj5Lku7ZcclxuICovXHJcbmV4cG9ydCBjb25zdCBWWEVUYWJsZVBsdWdpbkNoYXJ0cyA9IHtcclxuICBpbnN0YWxsICAoeHRhYmxlOiB0eXBlb2YgVlhFVGFibGUpIHtcclxuICAgIGNvbnN0IHsgdiwgaW50ZXJjZXB0b3IsIG1lbnVzIH0gPSB4dGFibGVcclxuICAgIGlmICh2ICE9PSAndjInKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignW3Z4ZS10YWJsZS1wbHVnaW4tY2hhcnRzXSBWMiB2ZXJzaW9uIGlzIHJlcXVpcmVkLicpXHJcbiAgICB9XHJcbiAgICBfdnhldGFibGUgPSB4dGFibGVcclxuICAgIGludGVyY2VwdG9yLmFkZCgnYmVmb3JlRGVzdHJveScsIGhhbmRsZUJlZm9yZURlc3Ryb3lFdmVudClcclxuICAgIGludGVyY2VwdG9yLmFkZCgnZXZlbnQuc2hvd01lbnUnLCBoYW5kbGVQcml2aWxlZ2VFdmVudClcclxuICAgIG1lbnVzLm1peGluKG1lbnVNYXApXHJcbiAgfVxyXG59XHJcblxyXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZYRVRhYmxlKSB7XHJcbiAgd2luZG93LlZYRVRhYmxlLnVzZShWWEVUYWJsZVBsdWdpbkNoYXJ0cylcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVlhFVGFibGVQbHVnaW5DaGFydHNcclxuIl19
